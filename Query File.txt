Lidi a predmety a znamky
query {
            acclassificationPage{
              semester{               
                subject{
                  name                  
                  semesters{
                    order                   
                  }                
                }
              }
              level{
                name
              }
              user{               
                name
                surname
                membership{
                  group{
                    name
                  }
                }                
              }              
            }
        }

        
        Komentáře k funkcím:

GradesTable: Komponenta pro zobrazení tabulky se známkami. Přijímá props selectedStudent pro výběr studenta.
useEffect: Efekt pro načítání dat o známkách a možnostech úrovní při změně vybraného studenta nebo obnovení tabulky.
handleEditClick: Funkce pro obsluhu události kliknutí na tlačítko úpravy. Aktualizuje stavy pro úpravy sloupců.
handleSelectChange: Funkce pro obsluhu události změny výběru v rozbalovacím seznamu. Aktualizuje stavy pro úpravy sloupců a volá funkci handleSaveClick.
handleSaveClick: Funkce pro uložení změn úrovní. Vytváří mutaci s údaji pro aktualizaci úrovně a odesílá ji na server. Po úspěšném uložení aktualizuje tabulku.
groupGradesByOrderAndSubject: Funkce pro seskupení známek podle semestru a předmětu.
renderLevelHeaders: Funkce pro vykreslení záhlaví úrovní.
renderLevelColumns: Funkce pro vykreslení sloupců úrovní. Zobrazuje buď select pro úpravu úrovně nebo zobrazuje název úrovně s tlačítkem pro úpravu.
groupedGrades: Seskupené známky podle semestru a předmětu.
Tento kód využívá simulovaná data pro dotaz na úrovně známek, která jsou uložena v JSON souboru fakeQueryLevels.json. Ujistěte se, že data jsou dostupná a správně importována.

Mějte na paměti, že tento kód je pouze ukázkou a předpokládá se, že máte další soubory pro definici dotazů a mutací, které jsou importovány do komponenty.



*******************************************************************************
OLD GradesTable.js
****;*******************************************************************************


  const [gradesData, setGradesData] = useState([]); // Stav pro uchování dat o známkách
  const [loading, setLoading] = useState(true); // Stav pro zobrazení načítání
  const [error, setError] = useState(null); // Stav pro zobrazení chyby
  const [editableColumns, setEditableColumns] = useState([]); // Stav pro uchování informace o úpravách
  const [refreshTable, setRefreshTable] = useState(false); // Stav pro obnovu tabulky
  const [levelOptions, setLevelOptions] = useState([]); // Stav pro uchování možností úrovní

  useEffect(() => {
    const fetchData = async () => {
      try {
        const gradesResponse = await GradesQuery(); // Získání dat o známkách pomocí dotazu
        const gradesData = await gradesResponse.json(); // Převedení odpovědi na JSON formát
        const grades = gradesData?.data?.acclassificationPage || []; // Získání seznamu známek
        const filteredGrades = grades.filter(
          (grade) => grade.user?.id === selectedStudent
        ); // Filtrace známek pro vybraného studenta
        setGradesData(filteredGrades);
        setLoading(false);
      } catch (error) {
        setError(error);
        setLoading(false);
      }
    };

    const fetchLevelOptions = async () => {
      try {
        // Nahraďte volání API fiktivními daty z fakeQueryLevel
        const levels = fakeQueryLevel.classificationLevels || []; // Získání seznamu úrovní z fiktivních dat
        setLevelOptions(levels);
      } catch (error) {
        console.error('Selhalo načítání možností úrovní:', error);
      }
    };

    fetchData();
    fetchLevelOptions();
  }, [selectedStudent, refreshTable]);

  // Funkce pro obsluhu události kliknutí na tlačítko úpravy
  const handleEditClick = (index, columnIndex) => {
    setEditableColumns((prevColumns) => {
      const updatedColumns = [...prevColumns];
      updatedColumns[index] = columnIndex;
      return updatedColumns;
    });
  };

  // Funkce pro obsluhu události změny výběru v rozbalovacím seznamu
  const handleSelectChange = (event, index, grade) => {
    const { value } = event.target;
    setEditableColumns((prevColumns) => {
      const updatedColumns = [...prevColumns];
      updatedColumns[index] = value;
      return updatedColumns;
    });
    const selectedAcclassificationPageId = grade?.id; // Získání id záznamu známky
    const selectedLastChange = grade?.lastchange; // Použití stávající hodnoty lastchange
    handleSaveClick(index, selectedAcclassificationPageId, value, selectedLastChange); // Předání hodnoty jako parametr levelId
  };

  // Funkce pro obsluhu události kliknutí na tlačítko uložit
  const handleSaveClick = async (index, classificationId, levelId, lastChange) => {
    const selectedLevel = levelOptions.find((level) => level.id === levelId); // Vyhledání vybraného objektu úrovně
    const selectedLevelId = selectedLevel ? selectedLevel.id : ''; // Získání id vybrané úrovně
  
    const mutation = {
      query: ClassificationUpdateMutation,
      variables: {
        id: classificationId,
        lastchange: lastChange,
        classificationlevelId: selectedLevelId, // Předání vybraného id úrovně do mutace
      },
    };
    
    try {
      const response = await authorizedFetch('/gql', {
        body: JSON.stringify(mutation),
      });
      const data = await response.json();
      // Zpracování odpovědi dle potřeby
      console.log(data);
      setRefreshTable(prevRefreshTable => !prevRefreshTable);

    } catch (error) {
      // Zpracování chyby
      console.error(error);
    }

    setEditableColumns((prevColumns) => {
      const updatedColumns = [...prevColumns];
      updatedColumns[index] = null;
      return updatedColumns;
    });
  };

  // Pokud probíhá načítání dat, zobrazí se zpráva "Načítání známek..."
  if (loading) {
    return <div>Načítání známek...</div>;
  }

  // Pokud nastala chyba při načítání dat, zobrazí se zpráva s chybovou zprávou
  if (error) {
    return <div>Chyba: {error.message}</div>;
  }

  // Funkce pro seskupení známek podle semestru a předmětu
  function groupGradesByOrderAndSubject(grades) {
    return grades.reduce((result, grade) => {
      const { semester } = grade;
      const key = `${semester.order}-${semester.subject.name}`;
      if (result[key]) {
        result[key].push(grade);
      } else {
        result[key] = [grade];
      }
      return result;
    }, {});
  }

  // Funkce pro vykreslení záhlaví úrovní
  function renderLevelHeaders() {
    const levelCount = 3; // Předpokládáme 3 úrovně
    const headers = [];
    for (let i = 1; i <= levelCount; i++) {
      headers.push(<th key={i}>Pokus {i}</th>);
    }
    return headers;
  }

  // Funkce pro vykreslení slo upců úrovní
function renderLevelColumns(gradesGroup) {
  const levelCount = 3; // Předpokládáme 3 úrovně

  // Definujte možnosti úrovní v rámci funkce
  const levelOptions = fakeQueryLevel.classificationLevels || [];

  const columns = [];
  for (let i = 0; i < levelCount; i++) {
    const grade = gradesGroup[i]; // Získání odpovídajícího objektu známky
    const levelName = grade ? grade.level.name : '-';
    const isEditable = editableColumns[i] === i;

    // Najděte vybranou úroveň podle id v editableColumns
    const selectedGrade = levelOptions.find(
      (level) => level.id === editableColumns[i]
    );

    columns.push(
      <td key={i}>
        {isEditable ? (
          // Select pro úpravu úrovně
          <select
            className="form-select"
            value={selectedGrade?.id || ""}
            onChange={(event) => handleSelectChange(event, i, grade)} // Předání známky jako parametr
          >
            {levelOptions.map((level) => (
              <option key={level.id} value={level.id}>
                {level.name}
              </option>
            ))}
          </select>
        ) : (
          // Zobrazení názvu úrovně a tlačítka pro úpravu
          <>
            {levelName}
            <button
              className="btn btn-link"
              onClick={() => handleEditClick(i, i)}
            >
              Upravit
            </button>
          </>
        )}
      </td>
    );
  }
  return columns;
}

const groupedGrades = groupGradesByOrderAndSubject(gradesData);

return (
  <div>
    <h2>Známky</h2>
    {Object.keys(groupedGrades).length === 0 ? (
      <div>Nejsou k dispozici žádné známky.</div>
    ) : (
      <table className="table table-striped table-hover table-sm">
        <thead>
          <tr>
            <th>Předmět</th>
            <th>Semestr</th>
            {renderLevelHeaders()}
            <th>Typ</th>
          </tr>
        </thead>
        <tbody>
          {Object.entries(groupedGrades).map(([key, gradesGroup]) => {
            const [order, subject] = key.split('-');
            return (
              <tr key={key}>
                <td>{subject}</td>
                <td>{order}</td>
                {renderLevelColumns(gradesGroup)}
                <td>{gradesGroup[0].type?.name}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    )}
  </div>
